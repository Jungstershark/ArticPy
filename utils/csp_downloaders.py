# -------------------------------------------------------------------------------------------------------------------- #
# |                                         IMPORT RELEVANT LIBRARIES                                                | #
# -------------------------------------------------------------------------------------------------------------------- #
import os
import shutil

import boto3
import botocore
import streamlit as st
from azure.storage.blob import BlobServiceClient
from google.cloud import storage

# -------------------------------------------------------------------------------------------------------------------- #
# |                                             GLOBAL VARIABLES                                                     | #
# -------------------------------------------------------------------------------------------------------------------- #
AWS_ACCESS_KEY_ID = ''
AWS_SECRET_ACCESS_KEY = ''
AWS_BUCKET_NAME = 'codechallengebucket'
AWS_OBJECT_KEY = '100k_news.csv'
AWS_FILE_NAME = os.path.join(os.getcwd(), 'file.csv')
AZURE_CONNECTION_STRING = ''
AZURE_BLOB_NAME = 'codechallenge'
LOCAL_DOWNLOAD_PATH = os.getcwd()
AZURE_DOWNLOAD_PATH = os.getcwd()
AZURE_DOWNLOAD_ABS_PATH = None
GOOGLE_APPLICATION_CREDENTIALS = 'codeChallenge_GCC_Authentication.json'
GOOGLE_BUCKET_NAME = 'codechallengebucket'
GOOGLE_STORAGE_OBJECT_NAME = '100k_news.csv'
GOOGLE_DESTINATION_FILE_NAME = os.path.join(os.getcwd(), 'download.csv')


# -------------------------------------------------------------------------------------------------------------------- #
# |                                                     AWS                                                          | #
# -------------------------------------------------------------------------------------------------------------------- #
class AWSDownloader:
    """
    This class manages the downloading of files stored on AWS

    This class only permits you to download files from a blob, one at a time. No threading is enabled on this class.

    Global Variables
    ----------------
    AWS_ACCESS_KEY_ID:                  The Access Key ID that is generated by AWS when creating a new user in the
                                        Management Console
    AWS_SECRET_ACCESS_KEY:              The Secret Access Key that is generated by AWS when creating a new user in the
                                        Management Console, is found on the same page as AWS_ACCESS_KEY_ID
    AWS_BUCKET_NAME:                    The name of the bucket which the data is stored
    AWS_OBJECT_KEY:                     The object key to the bucket
    AWS_FILE_NAME:                      The filename of the file of interest
    ----------------
    """

    def __init__(self):
        """
        Establishes a connection with AWS and authenticates the user
        """

        global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_BUCKET_NAME, AWS_OBJECT_KEY, AWS_FILE_NAME
        st.title('AWS Downloader')

        if st.checkbox('Use Alternative S3 Bucket and File Parameters'):
            AWS_BUCKET_NAME = st.text_input('Bucket Name')
            AWS_OBJECT_KEY = st.text_input('S3 Object Key')
            AWS_FILE_NAME = os.path.join(os.getcwd(), st.text_input('Filename with extension; note that the file will '
                                                                    'always be saved in the current working directory'))
        if st.checkbox('Advanced Options'):
            AWS_ACCESS_KEY_ID = st.text_input('AWS Access Key')
            AWS_SECRET_ACCESS_KEY = st.text_input('AWS Secret Access Key')

        st.info('Loading Credentials...')
        os.environ['AWS_ACCESS_KEY_ID'] = AWS_ACCESS_KEY_ID
        os.environ['AWS_SECRET_ACCESS_KEY'] = AWS_SECRET_ACCESS_KEY
        st.success('Credentials Loaded!')

    def downloadFile(self):
        """
        File downloader
        """

        global AWS_BUCKET_NAME, AWS_OBJECT_KEY, AWS_FILE_NAME

        # INSTANTIATE THE RESOURCE OBJECT
        s3Session = boto3.resource('s3')

        # ATTEMPT TO DOWNLOAD
        try:
            s3Session.Bucket(AWS_BUCKET_NAME).download_file(AWS_OBJECT_KEY, AWS_FILE_NAME)
        except botocore.exceptions.ClientError as e:
            if e.response['Error']['Code'] == "404":
                st.error('File does not exist.')
        else:
            st.success(f'File {AWS_FILE_NAME} Downloaded!')


# -------------------------------------------------------------------------------------------------------------------- #
# |                                                   AZURE                                                          | #
# -------------------------------------------------------------------------------------------------------------------- #
class AzureDownloader:
    """
    This class manages the downloading of files stored on Azure

    This class also allows you to download just one blob or all blobs stored in your container on Azure Storage

    Global Variables
    ----------------
    THREADING:                      Flag for determining if threading is done
    THREAD_COUNT:                   If THREADING is enabled, this represents the number of threads to use in the
                                    download, hence determining the total number of files to be downloaded at any time
    AZURE_CONNECTION_STRING:        Azure Storage Account Connection String
    AZURE_BLOB_NAME:                Name of Azure Storage Account Blob where data is stored
    LOCAL_DOWNLOAD_PATH:            Local Folder where downloaded data is stored
    AZURE_DOWNLOAD_PATH:            Local Folder path combined with the name of the file, None by default unless User
                                    specifies
    ----------------
    """

    def __init__(self):
        """
        This establishes connection with Azure and defines important ((environment)) variables that is necessary for
        the connection to be open and maintained for the download
        """

        global AZURE_CONNECTION_STRING, AZURE_BLOB_NAME, LOCAL_DOWNLOAD_PATH

        st.title('Azure Downloader')
        if st.checkbox('Advanced Options'):
            AZURE_CONNECTION_STRING = st.text_input("Azure Connection String")
            AZURE_BLOB_NAME = st.text_input("Azure Blob Name")
            LOCAL_DOWNLOAD_PATH = st.text_input("Local Download Path (do not modify if running on web app)",
                                                value=os.path.join(os.getcwd()))
        st.info('Establishing Connection with Azure...')

        try:
            self.BlobServiceClient_ = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
            self.ClientContainer = self.BlobServiceClient_.get_container_client(AZURE_BLOB_NAME)
            st.success('Connection Established!')
        except Exception as e:
            st.error(f'Error: {e}')
            return

    # ---------------------------------------------------------------------------------------------------------------- #
    # |                                            TYPICAL DOWNLOAD                                                  | #
    # ---------------------------------------------------------------------------------------------------------------- #
    def saveBlob(self, filename, file_content):
        """
        Writes the blob content into a file

        Parameters
        ----------
        filename:            Name of the file stored in the blob
        file_content:        Contents of the files stored in the blob
        ----------
        """

        global AZURE_DOWNLOAD_PATH

        # FULL FILEPATH
        AZURE_DOWNLOAD_PATH = os.path.join(LOCAL_DOWNLOAD_PATH, filename)

        # MAKE DIR FOR NESTED BLOBS
        os.makedirs(os.path.dirname(AZURE_DOWNLOAD_PATH), exist_ok=True)

        # WRITE OUT
        with open(AZURE_DOWNLOAD_PATH, 'wb') as azfile:
            azfile.write(file_content)

    def downloadBlob(self):
        """
        Downloads the blob and writes out the name
        """
        global AZURE_DOWNLOAD_PATH, AZURE_DOWNLOAD_ABS_PATH

        ClientBlob = self.ClientContainer.list_blobs()

        for blob in ClientBlob:
            print('.', end='')
            byte = self.ClientContainer.get_blob_client(blob).download_blob().readall()
            self.saveBlob(blob.name, byte)
            st.success('File Successfully downloaded!')
            AZURE_DOWNLOAD_ABS_PATH = os.path.join(AZURE_DOWNLOAD_PATH, blob.name)


# -------------------------------------------------------------------------------------------------------------------- #
# |                                                    GCC                                                           | #
# -------------------------------------------------------------------------------------------------------------------- #
class GoogleDownloader:
    """
    This class manages the downloading of files stored on Google Cloud

    This class only permits you to download files from a blob, one at a time. No threading is enabled on this class.

    Global Variables
    ----------------
    GOOGLE_APPLICATION_CREDENTIALS:                 Represents the path to the JSON file containing the credentials
    GOOGLE_BUCKET_NAME:                             Name of your GCS bucket
    GOOGLE_STORAGE_OBJECT_NAME:                     Name of the file you stored in the GCS bucket
    GOOGLE_DESTINATION_FILE_NAME:                   Path of the downloaded file, defaults to Current Working Directory
    ----------------
    """

    def __init__(self):
        global GOOGLE_APPLICATION_CREDENTIALS, GOOGLE_BUCKET_NAME, GOOGLE_STORAGE_OBJECT_NAME, \
            GOOGLE_DESTINATION_FILE_NAME
        st.title('Google Downloader')
        if st.checkbox('Define Custom GCS Parameters'):
            GOOGLE_BUCKET_NAME = st.text_input('ID of GCS Bucket')
            GOOGLE_STORAGE_OBJECT_NAME = st.text_input('ID of GCS Object')
            GOOGLE_DESTINATION_FILE_NAME = os.path.join(os.getcwd(), st.text_input('Downloaded Filename (with '
                                                                                   'extensions). The file will always '
                                                                                   'be downloaded to the current '
                                                                                   'working directory.'))
        GOOGLE_APPLICATION_CREDENTIALS = st.file_uploader('Load Service Account Credentials', type=['JSON'])

        if GOOGLE_APPLICATION_CREDENTIALS:
            try:
                st.info('Loading Credentials...')
                GOOGLE_APPLICATION_CREDENTIALS.seek(0)
                with open('../credentials/google_credentials.json', 'wb') as f:
                    shutil.copyfileobj(GOOGLE_APPLICATION_CREDENTIALS, f)
                os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = os.path.join(os.getcwd(),
                                                                            '../credentials/google_credentials.json')
            except Exception as e:
                st.error(e)
            else:
                st.success('Successfully loaded!')

            try:
                self.GoogleClient = storage.Client()
                self.GoogleBucket = None
                self.GoogleBlob = None

            except Exception as e:
                st.error(e)
                return

    def downloadBlob(self):
        """
        Downloads the file from the specified Google Cloud storage blob
        :return:
        """
        try:
            self.GoogleBucket = self.GoogleClient.bucket(GOOGLE_BUCKET_NAME)
            self.GoogleBlob = self.GoogleBucket.blob(GOOGLE_STORAGE_OBJECT_NAME)
            self.GoogleBlob.download_to_filename(GOOGLE_DESTINATION_FILE_NAME)
        except Exception as e:
            st.error(e)
        else:
            st.success('File Downloaded!')
